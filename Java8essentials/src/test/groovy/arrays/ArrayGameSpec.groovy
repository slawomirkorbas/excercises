package arrays

import spock.lang.Specification
import spock.lang.Unroll

import java.util.stream.Collector

/**
 * Created with IntelliJ IDEA.
 * User: slawomir
 * Date: 2/27/18
 * Time: 11:18 PM
 * To change this template use File | Settings | File Templates.
 */
class ArrayGameSpec extends Specification {

    @Unroll
    def 'canWin: return true if there is a way out of array otherwise false'() {
        given:
            int[] game = new int[gameData.size()];
            game = gameData.toArray(game);

        expect:
            canWin == ArrayGame.canWin(leap, game)

        where:
            canWin | leap | gameData
            true   | 39   | [ 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0 ]
            true   | 34   | [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, ]
            false  | 15   | [ 0, 1, 0, 1, 0, 1,1,1,1,1,1,1,1,1,1, 0, 1,1,1,1,1,1,1, 0, 0, 1,1,1,1,1,1,1,1, 0, 1,1,1, 0, 1,1,1,1,1, 0, 1,1, 0, 1,1,1, 0, 1,1,1,1,1,1,1,1, 0, 1, 0, 0, 0, 0, 1,1, 0, 1, 0, 0, 1,1, 0 ]
            false  | 60   | [ 0, 1,1,1,1, 0, 1,1,1,1,1,1, 0, 1,1,1,1,1, 0, 1, 0, 1,1,1,1,1,1,1, 0, 1,1, 0, 1, 0, 1,1, 0, 0, 1,1,1, 0, 0, 0, 1,1,1, 0, 1,1, 0, 1,1, 0, 0, 0, 1,1,1,1,1,1,1,1, 0, 1,1, 0, 0 ]
            false  | 4    | [ 0, 1,1,1,1,1  ]
            true   | 4    | [ 0, 1,1,1, 0, 1,1,1, 0, 1, 0 ]
            false  | 5    | [ 0, 0, 1,1, 0, 1,1,1,1,1,1, 0, 0, 1,1,1,1,1,1,1,1,1,1,1,1, 0, 0, 0, 1, 0, 1,1,1,1,1,1,1, 0, 1,1, 0, 1,1,1,1,1, 0, 0, 0, 0, 1,1,1,1, 0, 1 ]
            true   | 27   | [ 0, 1,1,1, 0, 1, 0, 1,1,1, 0, 1, 0, 1,1,1,1,1,1, 0, 1,1, 0, 1,1,1,1, 0, 0, 1,1,1 ]
            false  | 22   | [ 0, 1,1, 0, 1,1,1,1,1,1,1, 0, 1,1,1,1, 0, 1,1,1, 0, 0, 1, 0, 0, 1, 0, 1,1,1, 0, 1, 0, 1,1,1, 0, 0, 1,1, 0, 0, 0, 1,1,1,1,1,1, 0, 0, 1,1, 0, 0, 1,1,1, 0, 1, 0 ]
            true   | 5    | [ 0, 1,1, 0, 1, 0, 1,1, 0  ]
            true   | 77   | [ 0, 0, 1,1, 0, 1,1,1,1, 0, 0, 1,1,1,1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1,1,1,1,1, 0, 1,1, 0, 0, 0, 1,1, 0, 1, 0, 1,1,1,1, 0, 1,1,1, 0, 0, 0, 1, 0, 1,1,1, 0, 1,1, 0, 1, 0, 1,1,1,1,1,1, 0, 1,1,1, 0, 1,1,1,1, 0, 0, 1,1,1, 0, 1,1, 0, 1, 0, 1,1,1,1,1,1, 0 ]
            true   | 43   | [ 0, 0, 1,1, 0, 1, 0, 1,1,1,1, 0, 0, 0, 0, 1,1,1, 0, 1,1,1,1, 0, 1, 0, 1, 0, 0, 0, 0, 1,1,1, 0, 1,1,1,1,1,1,1,1, 0, 0, 0, 1,1,1  ]
            true   | 19   | [ 0, 1,1,1, 0, 1,1,1,1,1,1, 0, 1,1,1,1, 0, 1, 0, 0, 1,1, 0, 1, 0, 0, 1,1,1,1, 0, 0, 0, 1,1,1,1, 0, 1,1,1,1,1,1, 0, 1, 0, 0, 1,1,1, 0, 0, 1,1,1, 0, 0, 1, 0, 1,1,1, 0, 1,1,1,1,1,1,1 ]
            false  | 54   | [ 0, 1, 0, 1,1,1,1, 0, 1,1, 0, 1,1,1, 0, 1,1,1,1,1,1,1,1, 0, 1,1,1,1, 0, 1,1,1, 0, 1, 0, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 0, 0, 0, 0, 1, 0, 1,1,1 ]
            false  | 3    | [ 0, 0, 0, 1,1,1,1, 0, 1, 0, 1, 0, 0, 1, 0, 1,1, 0, 1, 0, 1,1,1,1,1,1, 0, 1,1, 0, 0, 1, 0, 1,1, 0, 1,1, 0, 1, 0, 1,1,1, 0, 0, 1,1, 0, 1,1,1   ]
            false  | 13   | [ 0, 0, 1, 0, 1, 0, 0, 1, 0, 1,1,1,1,1,1,1, 0, 0, 1,1,1, 0, 1, 0, 1, 0, 1,1,1,1, 0, 1,1,1,1, 0, 0, 1,1,1,1,1, 0, 0, 1,1,1, 0, 0, 1, 0, 0, 1,1,1,1,1,1, 0, 1,1, 0, 0, 0, 1,1,1,1,1,1, 0, 1, 0, 0, 1,1, 0, 0, 0, 1,1  ]
            false  | 45   | [ 0, 1,1, 0, 1,1, 0, 1, 0, 1,1, 0, 1,1, 0, 0, 1,1,1,1,1,1,1, 0, 1, 0, 1,1,1, 0, 1, 0, 1,1, 0, 1, 0, 1,1,1,1,1,1,1,1,1,1,1, 0, 1,1,1,1,1,1, 0, 1,1,1, 0, 0, 0, 1, 0, 1  ]
            true   | 45   | [ 0, 0, 0, 0, 1, 0, 1,1,1, 0, 1,1,1,1,1,1,1,1,1,1, 0, 0, 1, 0, 1,1, 0, 1,1, 0, 1,1,1,1, 0, 0, 1, 0, 1,1, 0, 1,1,1,1, 0, 1,1, 0, 1,1,1,1,1,1, 0, 1,1, 0, 1, 0, 1,1,1,1,1,1,1,1,1,1,1, 0, 1,1,1,1,1,1,1, 0, 1, 0, 0, 1,1, 0, 1,1,1, 0, 1,1,1  ]
            // ....
            true   | 47   | [ 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1 ]
            false  | 24   | [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1 ]
            false  | 11   | [ 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1]

    }

    def 'canWin: return true if there is a way out of array otherwise false - using samples from files'() {
        given:
            File gamesFile   = new File('src/main/resources/array_game_sample_data.txt')
            File resultsFile = new File('src/main/resources/array_game_sample_results.txt')
            List<String> games = gamesFile.readLines()
            List<String> results = resultsFile.readLines()


            for( int idx = 0; idx < results.size(); idx++ ) {
                boolean canWin = results[idx] == "YES" ? true : false;
                int leap = Integer.parseInt(games[idx*2].split(" ")[1]);
                List<String> gameLine = games[idx*2 + 1].split(" ");
                //gameLine.stream().map( str -> Integer.parseInt(str) ).collect(Collector.to())
                int[] game = new int[gameLine.size()];
                for( int cell = 0; cell < game.length; cell++ ) {
                    game[cell] = Integer.parseInt(gameLine[cell]);
                }
                expect:
                    assert( canWin == ArrayGame.canWin(leap, game)  );
            }

    }
}


